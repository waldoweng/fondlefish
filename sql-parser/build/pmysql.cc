#line 2 "/Users/wengzhao/Desktop/fondlefish/sql-parser/build/pmysql.cc"

#line 4 "/Users/wengzhao/Desktop/fondlefish/sql-parser/build/pmysql.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 273
#define YY_END_OF_BUFFER 274
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1191] =
    {   0,
        0,    0,    0,    0,    0,    0,  274,  272,  270,  271,
      272,  272,  264,  236,  236,  272,  236,  236,  236,  219,
      219,  272,  244,  239,  242,  272,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  272,  236,  268,  269,  268,  254,  245,    0,
      231,  229,    0,  264,  237,    0,  230,  228,    0,    0,
        0,  219,  221,  266,  220,    0,    0,    0,  248,  246,
      243,  241,  247,    0,  257,    0,    0,  254,  254,  254,
      254,    8,  254,    0,  254,  254,  254,  254,   18,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,   85,  254,   87,   96,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  130,  254,  135,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  191,  254,  254,
      254,  254,  254,  254,  254,  254,  254,    0,  254,  254,
      254,    0,  256,    0,  238,  267,  254,    0,    0,  229,
        0,    0,    0,  228,    0,  265,    0,  220,    0,  234,

        0,  222,  233,  240,    0,  261,    0,  263,    0,  262,
        1,    2,  254,  254,    6,    7,    9,  254,    0,  254,
      254,  254,  254,   15,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,   47,
      254,  254,  254,  254,  254,   57,  254,  254,  254,  254,
      254,   64,  254,  254,  254,  254,  254,  254,  254,   73,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,   93,  254,  254,   99,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  123,  254,  126,  254,  254,  254,    0,  254,

      254,  137,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  166,  254,  254,  254,  254,
      171,  178,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  201,  254,  254,  254,  254,  254,  254,  254,
      254,    0,  215,  254,  254,  255,    5,    0,  229,    0,
      228,    0,    0,    0,    0,    0,  265,    0,  224,    0,
      223,  258,  260,  259,  254,  254,  254,  235,  254,  254,
      254,  254,   16,   17,   19,  254,   21,  254,   23,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,   41,  254,  254,  254,  254,  254,  254,
       52,  254,  254,  254,   59,   60,   61,   62,   65,  254,
      254,   69,  254,  254,  254,  254,  254,  254,   76,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  188,   93,   13,  254,   95,  254,   98,  100,  101,
      254,  254,  104,  105,  254,  254,  108,  254,  111,  112,
      115,  254,  254,  254,  254,  254,  254,  254,    0,  254,
      128,  254,  254,    0,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  145,  147,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  167,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  184,  185,  186,
      254,  254,  254,  254,  225,  194,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  210,
      254,  254,  213,  254,  232,  216,  254,    0,    0,    0,
        3,  254,  254,  254,  254,  254,  254,  254,  254,  254,
       24,  254,  254,  254,  254,  254,  254,  254,  253,  254,
       33,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  227,   71,   72,   74,  254,  254,   78,   79,
      254,  254,  254,  254,   99,  254,   89,   90,  254,  254,
      254,  254,  254,  254,  103,  106,  107,  254,  254,  254,
      254,  117,  254,  254,  254,  254,  254,    0,  254,  254,
      254,    0,  254,  254,  136,  138,  254,  254,  254,  254,
      143,  144,  146,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  158,  149,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  181,  254,  254,  254,  254,  254,  254,
      254,  254,  250,  195,  254,  254,  254,  254,  254,  200,

      202,  254,  254,  206,  254,  254,  254,  211,  212,  214,
      254,  254,  254,  254,   11,  254,   14,  254,   22,  254,
      254,   26,  254,  254,  254,  254,  254,   32,  254,   38,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,   51,  254,  254,  254,   58,   63,   66,   67,  254,
       72,  254,  254,   80,  254,  254,  254,   86,   88,  254,
       92,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,    0,  254,  129,  254,    0,  254,
      133,  254,  254,  254,  254,  254,  149,  254,  151,  152,
      254,  254,  254,  156,  157,  159,  160,  254,  163,  254,

      254,  168,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  196,  254,  197,  254,  199,  254,  254,  206,  254,
      254,  254,  254,  254,    4,  254,   12,   20,  254,   25,
       27,  254,  254,  254,   31,  254,  254,  254,  254,  254,
      254,  254,  254,  254,   47,   48,   49,   50,  254,  254,
      254,   70,   75,  254,  254,  254,  254,  254,   93,  254,
       97,  102,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  125,    0,  254,   47,    0,  254,  254,  139,
      254,  141,  254,  254,  150,  153,  154,  254,  161,  254,

      254,  254,  169,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  249,  254,  254,  254,  254,  254,  254,  254,
      193,  226,  254,  254,  254,  254,  254,  209,  254,  254,
      254,  254,  254,  254,   30,  254,   39,   42,  254,  254,
       43,  254,  254,  254,   53,  254,   55,   77,  254,  254,
      254,  254,  254,   94,  254,  113,  114,  254,  254,  254,
      254,  254,  254,  254,  124,    0,  254,    0,  132,  254,
      254,  254,  254,  155,  254,  254,  254,  170,  254,  173,
      254,  254,  254,  254,  179,  254,  254,  254,  254,  254,
      189,  190,  192,  198,  203,  204,  254,  254,  254,  218,

      254,   23,   28,  254,  254,  254,  254,   40,  251,  252,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      109,  254,  254,  119,  254,  119,  254,  254,    0,  254,
        0,  254,  140,  142,  254,  254,  164,  165,  254,  254,
      254,  254,  254,  254,  254,  182,  254,  187,  254,  207,
      254,  254,  254,   29,  254,  254,  254,  254,   45,   46,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  118,
      120,  254,  254,   68,  254,    0,  134,  148,  254,  254,
      174,  254,  254,  254,  254,  183,  254,  254,  217,  254,
      254,  254,  254,  254,  254,   56,  254,  254,   83,   84,

       91,  254,  254,  254,  254,  254,    0,  254,  254,  254,
      254,  254,  254,  254,  254,  254,   34,   35,   37,  254,
      254,  254,  254,  254,  116,  254,  254,  254,  131,  254,
      172,  254,  254,  254,  254,  254,  208,  254,  254,  254,
       54,   81,  254,  254,  254,  122,  254,  254,  254,  254,
      254,  180,  205,   10,  254,  254,  254,  110,  254,  254,
      254,  175,  254,  254,  254,   44,  254,  254,  254,  254,
      254,  254,  254,   82,  254,  254,  254,  254,  177,   36,
      254,  254,  254,  254,  121,  127,  162,  254,  176,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
        8,   12,   13,    8,   14,   15,   16,   17,   18,   19,
       19,   20,   19,   19,   19,   21,   19,   22,    8,   23,
       24,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
        1,   53,    1,    8,   54,   55,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,    1,   82,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    1,    4,    1,    6,    6,    6,    6,
        6,    1,    1,    1,    1,    1,    6,    6,    6,    6,
        6,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1,    7,    8,    6,    6,    6,    6,    6,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1
    } ;

static yyconst flex_int16_t yy_base[1212] =
    {   0,
        0,    0,   80,   81,   58,   59, 1130, 2575, 2575, 2575,
     1104,   84,    0, 2575,  906,   85,   82,   87,  766,  101,
      124,  753,   86, 2575,   66,  107,  119,  136,  129,  163,
      184,  194,   50,  156,  233,   57,  105,  211,  241,  233,
      215,  106,   78,  252,  294,  286,  331,  104,  280,  207,
      121,  141,  345,  682, 2575, 2575,  737,  342, 2575,  326,
     2575,  747,  342,    0, 2575,  165, 2575,  722,  203,  636,
      373,  402,  407, 2575,  422,  116,  431,    0, 2575, 2575,
      603, 2575, 2575,  619,  328,  616,  614,    0,  178,  288,
      404,  185,  169,  130,  335,  424,  228,  328,    0,  340,

      405,  433,  406,  331,  408,  449,  429,  337,  345,  402,
      417,  411,  449,  439,  456,  451,  444,  451,  460,  464,
      473,  485,  465,  481,  468,    0,  477,  507,    0,  491,
      493,  478,  492,  504,  524,  545,  492,  519,  539,  524,
      516,  534,  532,  609,  527,  545,  538,  575,  545,  560,
      619,  563,  562,  567,  573,  602,  571,  580,  616,  583,
      589,  610,  601,  625,  624,  624,  639,    0,  671,  674,
      640,  686,  656,  657,  685,  654,  667,    0,  661,  683,
      671,  740, 2575,  553, 2575, 2575,  724,  305,  684,  720,
      723,  239,  577,  712,  726,    0,  749,  740,  768,  213,

      788,  793,    0, 2575,  121, 2575,  125, 2575,  244, 2575,
        0,    0,  741,  736,    0,    0,    0,  749,  774,  753,
      747,  762,  771,    0,  771,  768,  777,  787,  777,  791,
      786,  783,  809,  789,  803,  787,  790,  809,  496,  803,
      810,  821,  813,  812,  810,    0,  832,  831,  836,  841,
      845,    0,  839,  852,  842,  842,  837,  861,  864,  863,
      854,  857,  856,  850,  863,  865,  856,  860,  875,  875,
      881,  866,  883,  913,  874,  892,  891,  899,  908,  894,
      914,  911,  917,  919,  923,  918,  910,  491,  924,  920,
      927,  911,  924,  915,  533,  914,  926,  940,  968,  937,

      945,  963,  961,  957,  970,  969,  974,  974,  975,  976,
      977,  982,  979,  964,  967,  967,  974,  982,  981,  982,
      990,  981,  995,  984, 1003,    0,  985, 1021, 1006, 1024,
     1025,    0, 1010, 1030, 1015, 1023, 1020, 1025, 1019, 1026,
     1036, 1017, 1034, 1039, 1040, 1032, 1063, 1036, 1039, 1049,
     1060, 1055,    0, 1052,  478, 1061, 1083, 1070, 1077, 1084,
     1073,  459,    0, 1076, 1081, 2575,    0,  346, 1070, 1121,
     1122, 1116, 1126, 1135, 1143, 1147,    0, 1141, 1147, 1163,
     2575, 2575, 2575, 2575, 1083, 1091,  381, 2575, 1126, 1141,
     1133, 1132,    0,    0,    0, 1150,    0, 1145, 1158, 1149,

     1160, 1150, 1159, 1156, 1146, 1158, 1163, 1149, 1151, 1153,
     1172, 1163, 1180, 1163, 1191, 1171, 1184, 1165, 1162, 1182,
     1185, 1187, 1199, 1197,    0,    0,    0, 1208,    0, 1202,
     1199,    0, 1219, 1216, 1214, 1203, 1219, 1216,    0, 1206,
     1207, 1213, 1216,  376,  358, 1217, 1212, 1228, 1223, 1222,
     1243,    0,    0,    0, 1255,    0, 1242,    0,    0,    0,
     1236, 1255,    0,    0, 1243, 1247,    0, 1255,    0, 1273,
        0, 1252, 1268, 1256, 1266, 1259, 1274, 1263, 1306, 1265,
        0, 1279, 1267, 1266, 1285, 1270, 1276, 1290, 1292, 1302,
     1310, 1313, 1308, 1301,    0, 1303, 1300, 1324, 1313, 1330,

     1332, 1325, 1317, 1318, 1326, 1318, 1334, 1320, 1329, 1329,
     1342, 1337, 1333,    0, 1339, 1347, 1348, 1334, 1339, 1360,
     1374, 1349, 1364, 1358, 1374, 1367, 1374,    0,    0, 1365,
     1390, 1377, 1384,  397,    0,    0, 1380, 1374, 1381, 1394,
     1393, 1381, 1398, 1397, 1411, 1404, 1405, 1408, 1408,    0,
     1414, 1422,    0, 1429, 2575,  343, 1429, 1457, 1458, 1456,
        0, 1415, 1433, 1442, 1444, 1430, 1426, 1448, 1448, 1454,
        0, 1438, 1445, 1447, 1442, 1447, 1452, 1449,    0, 1463,
        0, 1455, 1454, 1472, 1465, 1474, 1462, 1480, 1487, 1498,
     1482, 1493, 1502, 1503, 1500, 1497, 1497, 1507, 1507, 1509,

     1496, 1507,    0,    0,  612,    0, 1510, 1514,    0,    0,
     1513, 1507, 1511, 1520,    0, 1521,    0,    0, 1508, 1511,
     1527, 1511, 1515, 1533,    0,    0,    0, 1530, 1539, 1552,
     1540,    0, 1550, 1560, 1561, 1558, 1567, 1545, 1561, 1553,
     1563, 1557, 1565, 1561,    0,    0, 1565, 1559, 1563, 1578,
        0,    0,    0, 1578, 1568, 1566, 1583, 1569, 1587, 1573,
     1584, 1591, 1603,    0,    0, 1593, 1614, 1612, 1601, 1603,
     1623, 1620, 1625, 1621, 1625, 1628, 1612, 1622, 1631, 1620,
     1626, 1629, 1621,    0, 1622, 1627, 1622, 1631, 1632, 1642,
     1639, 1644, 2575,    0, 1646, 1640, 1655, 1653, 1668,    0,

        0, 1673, 1670, 1662, 1668, 1682, 1670,    0,    0,    0,
     1672, 1677, 1682, 1674,    0, 1675,    0, 1685,    0, 1671,
     1688,    0, 1674, 1688, 1697, 1678, 1680,    0, 1681,    0,
     1685, 1692, 1702, 1686, 1688, 1718, 1721, 1713, 1726, 1717,
     1735,    0, 1738, 1732, 1739,    0,    0,    0,    0, 1729,
        0, 1730, 1721,    0, 1728, 1738, 1743,    0,    0, 1740,
        0, 1733, 1751, 1750, 1749, 1748, 1743, 1735, 1753, 1780,
     1754,  334, 1759, 1753, 1758, 1759,    0, 1780, 1778, 1769,
     1796, 1793, 1790, 1776, 1781, 1789,    0, 1799,    0,    0,
     1800, 1801, 1804,    0,    0,    0, 1790,  308,    0, 1801,

     1793,    0, 1802, 1806, 1811, 1797, 1806, 1814, 1810, 1822,
     1811, 1829, 1855, 1840, 1846, 1847, 1838, 1835, 1832, 1843,
     1840,    0, 1845,    0, 1855,    0, 1841, 1849,    0, 1862,
     1847, 1860, 1853, 1857,    0, 1868,    0,    0, 1867,    0,
        0, 1858, 1865, 1870,    0,  278, 1873, 1874, 1876, 1879,
     1865, 1877, 1878, 1890,    0,    0,    0,    0, 1901, 1897,
     1893,    0,    0, 1894, 1906, 1913, 1914, 1898,    0, 1907,
        0,    0, 1907, 1919, 1902, 1908, 1913, 1912, 1924, 1916,
     1918, 1913,    0, 1914, 1931,    0, 1929, 1934, 1929,    0,
     1938,    0, 1939, 1960,    0,    0,    0, 1944,    0, 1956,

     1949, 1957,    0, 1970, 1958, 1970, 1967,  264, 1974, 1966,
     1972, 1960, 2575, 1967, 1965, 1964, 1972, 1985, 1968, 1982,
        0,    0, 1986, 1986, 1989, 1977, 1995,    0, 1983, 1987,
     1993, 1997, 2007, 2008,    0, 2025, 2008,    0,  295,  293,
        0, 2015, 2011, 2018,    0, 2024, 2016,    0, 2020, 2018,
     2016, 2023, 2030,    0, 2036,    0,    0, 2024, 2028, 2027,
     2024, 2029, 2043, 2048,    0, 2034,  246, 2052,    0, 2045,
     2055, 2068, 2074,    0, 2071, 2080, 2069,    0, 2068,    0,
     2075, 2072,  242, 2079,    0,  231, 2085, 2068, 2089, 2079,
        0,    0,    0,    0,    0, 2077, 2072, 2096, 2080,    0,

     2096,    0,    0, 2083, 2103, 2096, 2087,    0, 2575, 2575,
     2088, 2105, 2107, 2093, 2098, 2097, 2112, 2111, 2123, 2116,
     2124, 2136, 2144,    0, 2127,    0, 2145, 2146, 2131, 2131,
     2151, 2128,    0,    0, 2135, 2152,    0,    0, 2148, 2151,
     2154, 2155,  191, 2152,  217,    0, 2159,    0, 2144,    0,
     2145, 2160, 2156,    0, 2150, 2158, 2168, 2180,    0,    0,
     2169, 2172, 2187, 2182, 2198, 2200, 2200, 2186, 2187,    0,
        0, 2190, 2194, 2575, 2195, 2191,    0,    0, 2194, 2198,
        0, 2196, 2201, 2199, 2204,    0, 2219, 2216,    0, 2217,
     2218, 2221, 2209, 2225, 2220,    0, 2211, 2238,    0,    0,

        0, 2246, 2228, 2239, 2245,  155, 2256, 2247, 2249, 2243,
     2244, 2261, 2258, 2255, 2251, 2256,    0, 2252,    0, 2258,
     2271, 2250, 2274, 2265,    0, 2260, 2276, 2279, 2575, 2265,
        0, 2273, 2272, 2268, 2275, 2285,    0, 2285, 2291, 2298,
        0,    0, 2302, 2303, 2315,    0, 2312, 2317, 2303, 2320,
     2304,    0,    0,    0, 2325, 2323, 2314,    0, 2326, 2317,
     2329,    0,  135, 2321, 2322,    0, 2332, 2322, 2326, 2324,
     2324, 2323, 2328,    0, 2331, 2332, 2345, 2348,    0,    0,
     2365, 2363, 2371, 2354,    0,    0,    0, 2359,    0, 2575,
     2433, 2441, 2449, 2457, 2463, 2466, 2473, 2480, 2488,  124,

     2496, 2504, 2512,  107, 2519, 2526, 2534, 2542, 2550, 2558,
     2566
    } ;

static yyconst flex_int16_t yy_def[1212] =
    {   0,
     1190,    1, 1191, 1191,    1,    1, 1190, 1190, 1190, 1190,
     1190, 1192, 1193, 1190, 1190, 1194, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1195, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1197, 1190, 1190, 1190, 1190, 1196, 1190, 1192,
     1190, 1190, 1198, 1193, 1190, 1194, 1190, 1190, 1199, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1200, 1190, 1190,
     1190, 1190, 1190, 1201, 1195, 1202, 1203, 1196, 1196, 1196,
     1196, 1196, 1196, 1190, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1204, 1196, 1196,
     1196, 1197, 1190, 1205, 1190, 1190, 1196, 1206, 1192, 1192,
     1198, 1207, 1208, 1208, 1209, 1210, 1190, 1190, 1190, 1190,

     1190, 1190, 1200, 1190, 1201, 1190, 1202, 1190, 1203, 1190,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1190, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1190, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1204, 1196, 1196, 1196, 1190, 1196, 1211, 1206, 1194,
     1194, 1207, 1194, 1207, 1194, 1207, 1210, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1196, 1196, 1196, 1190, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1190, 1196,
     1196, 1196, 1196, 1190, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1190, 1196, 1196, 1206, 1211, 1199,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1190, 1196, 1196,
     1196, 1190, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1190, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1190, 1196, 1196, 1196, 1190, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1190, 1196, 1196, 1190, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1190, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1190, 1196, 1190, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1190, 1190,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1190, 1196,
     1190, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1190, 1196, 1190, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1190, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1190, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,    0,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190
    } ;

static yyconst flex_int16_t yy_nxt[2658] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   16,
       14,   14,   14,   17,   18,   19,   20,   21,   21,   21,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,    8,    8,   53,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   54,   56,   56,   58,   58,   61,   67,   62,   82,
       83,   57,   57,  122,   68,   70,   71,  131,   72,   72,

       72,   72,   72,   73,   73,   73,   73,   73,   80,   81,
       59,   84,  362,   58,   58,   75,   86,   72,   72,   72,
       72,   72,  122,  206,  150,  382,  131,  208,   76,  203,
      174,   77,  200,  200,  383,  132,   63,   69,   75,  133,
       72,   72,   72,   72,   72,   94,  219,  219,   89,  148,
       78,  180,  149,  150,   77,  100,   90,   76,   91,  174,
       77,   87,  101,   92,  132,   93,   95, 1190,  133,  102,
       96,  181,  103,   97,   68,  104,   98,   89,  148,   78,
      180,  149,  123,   77,  100,   90,   99,   91, 1171,  105,
      124,  101,   92,  106,   93,   95,  125,  107,  102,   96,

      181,  103,   97,  108,  104,   98,  109,  211, 1128,  110,
      111,  123,  194,  217,  218,   99,  178,  192,  105,  124,
      116,  112,  106,  113,  117,  125,  107,  913,  114,  200,
      200,  118,  108,  115,  119,  109,  211,  120,  110,  111,
      121,  134,  217,  218, 1084,  135,  210,  179,  371,  116,
      112,  136,  113,  117,  144,  195,  145,  114,  146,  141,
      118,  147,  115,  119,  126,  127,  120,  137,  225,  121,
      134,  138,  128,  142,  135,  139,  179,  129,  130,  143,
      136,  140,  151,  144, 1044,  145,  152,  146,  141,  153,
      147,  372,  154,  126,  127, 1042,  137,  225,  384, 1030,

      138,  128,  142, 1010,  139, 1009,  129,  130,  143,   62,
      140,  151,  164,  175,  176,  152,  165,  982,  153,  166,
      167,  154,  155,  177,  156,  212,  168,  157,   61,  169,
       62,  936, 1190,  213,  158,  159,  160, 1190,  161,  162,
      163,  164,  175,  176,   61,  165,  190,  183,  166,  167,
      369,  155,  177,  156,  212,  168,  157,  368,  169,  184,
      184,  900,  213,  158,  159,  160,  220,  161,  162,  163,
      170,   89,  171,  226,  237,  172,  173,  227,   63,   90,
      221,  187, 1190,  247,  228,  248,   92,  881,   93,   73,
       73,   73,   73,   73,  191,  220,  711,  184,  559,  170,

       89,  171,  226,  237,  172,  173,  227,  693,   90,  221,
      187,  613,  247,  228,  248,   92,   75,   93,   72,   72,
       72,   72,   72,   73,   73,   73,   73,   73,  249,  612,
      214,  229,   77,  215,  563,  230,  235,  197,  198,  198,
      198,  198,  198,  201,  201,  250,  236,  202,  202,  202,
      202,  202,  199,  238,  216,  251,  222,  249,  239,  214,
      229,   77,  215,  223,  230,  235,  197,  254,  555,  224,
      231,  232,  233,  245,  250,  236,  246,  240,  252,  234,
      241,  199,  238,  216,  251,  222,  242,  239,  257,  258,
      255,  259,  223,  243,  244,  253,  254,  256,  224,  231,

      232,  233,  245,  260,  261,  246,  240,  252,  234,  241,
      262,  263,  265,  266,  267,  242,  268,  257,  258,  255,
      259,  275,  243,  244,  253,  264,  256,  276,  277,  278,
      279,  545,  260,  261,  479,  280,  269,  289,  270,  262,
      263,  265,  266,  267,  472,  268,  271,  272,  290,  415,
      275,  273,  274,  293,  264,  183,  276,  277,  278,  279,
      281,  294,  282,  283,  280,  269,  289,  270,  291,  297,
      298,  284,  300,  285,  301,  271,  272,  290,  292,  295,
      273,  274,  293,  302,  286,  287,   68,  296,  306,  281,
      294,  282,  283,  288,  307,  318,  319,  291,  297,  298,

      284,  300,  285,  301,  320,  303,  321,  292,  295,  304,
      299,  327,  302,  286,  287,  305,  210,  306,  208,  328,
      331,  206,  288,  307,  318,  319,  332,  204,  335,  374,
      322,  751,  746,  320,  303,  321,  333,  196,  304,  323,
      327,  324,  329,  325,  305,  308,  330,  326,  328,  331,
      309,  310,  336,  334,  340,  332,  311,  335,  312,  322,
      313,  314,  337,  315,  316,  333,  317,  338,  323,  351,
      324,  329,  325,  339,  308,  330,  326,  341,  342,  309,
      310,  336,  334,  340,  355,  311,   61,  312,   62,  313,
      314,  337,  315,  316,  356,  317,  338,  343,  351,  360,

      357,  361,  339,  346,  363,  344,  341,  342,  347,  364,
      348,  349,  352,  355,  365,  358,  353,  345,  350,  359,
      354,  371,   61,  356,  369,   61,  343,  190,  360,  357,
      361,   66,  346,  363,  344,  371,   63,  347,  364,  348,
      349,  352,  183,  365,  358,  353,  345,  350,  359,  354,
      214,  188,  186,  367,  184,  184,  198,  198,  198,  198,
      198,  378,  378,  185,  374,  379,  379,  379,  379,  379,
      199,  385,   63,  386,  216,  191,   79,   74,  376,  214,
      380,  380,  367,  388,  381,  381,  381,  381,  381,  387,
      219,  219,  184,  389,  366,  390,  391,  392,  393,  199,

      385,  394,  386,  216,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  395,  396,  398,  397,  387,  400,
      399,  403,  389,  401,  390,  391,  392,  393,  408,  409,
      394,  410,  402,  411,  412,  413,  418,  416,  404,  414,
      417,  421,  422,  395,  396,  398,  397,  419,  400,  399,
      403,  420,  401,  405,  406,  423,  407,  408,  409,  424,
      410,  402,  411,  412,  413,  418,  416,  404,  414,  417,
      421,  422,  425,  426,  427,  428,  419,  429,  430,  433,
      420,  434,  405,  406,  423,  407,  431,  432,  424,  435,
      436,  437,  439,  438,  440,  441,  442,  443,  444,  445,

      446,  425,  426,  427,  428,  447,  429,  430,  433,  448,
      434,  449,  450,  451,   65,  431,  432,  457,  435,  436,
      437,  439,  438,  440,  441,  442,  443,  444,  445,  446,
      452,  458,  453,  454,  447,  459,  460,  461,  448,  463,
      449,  450,  451,  455,  464,  465,  457,  466,  467,  468,
      470,  471,  473,  456,  474,  462,  475,  476,  477,  469,
      458,  478,  480,  481,  459,  460,  461,  482,  463,  299,
      483,  485,  455,  464,  465,  486,  466,  467,  468,  470,
      471,  473,  456,  474,  462,  475,  476,  477,  469,  489,
      478,  480,  481,  487,  488,  490,  482,  484,  491,  483,

      485,  492,  493,  494,  486,  496,  497,  498,  499,  500,
      502,  495,  503,  504,  505,  506,  501,  507,  489,  508,
      509,  510,  487,  488,  490,  511,  484,  491,  512,  513,
      492,  493,  494,  514,  496,  497,  498,  499,  500,  502,
      495,  503,  504,  505,  506,  501,  507,  515,  508,  509,
      510,  516,  517,  522,  511,  518,  523,  512,  513,  524,
      525,  526,  514,  527,  528,  529,  530,  531,  532,  519,
      535,  533,  536,  520,  369,  539,  515,  534,  521,  540,
      516,  517,  522,  541,  518,  523,  542,  543,  524,  525,
      526,  544,  527,  528,  529,  530,  531,  532,  519,  535,

      533,  536,  520,  537,  539,  538,  534,  546,  540,  550,
      547,  548,  541,  551,  552,  542,  543,  553,  554,  556,
      544,  557,  368, 1190, 1190,  371,  561,   59,   67, 1190,
       68,  371,  537,  549,  538,   68,  546,   67,  550,  547,
      548,  562,  551,  552,  371,   67,  553,  554,  556,   67,
      557, 1190,   68, 1190, 1190,  561,  371,  379,  379,  379,
      379,  379,  549,  379,  379,  379,  379,  379,  372,  564,
      562,  565,  566,  192,  192,  567,  568,  569,   69,  381,
      381,  381,  381,  381,  570,  571,  572,  560,  573,  574,
      575,  576,  577,  578,  579,   69,  580,  581,  564,  560,

      565,  566,  582,  583,  567,  568,  569,  584,  585,  590,
      591,  592,  593,  570,  571,  572,  586,  573,  574,  575,
      576,  577,  578,  579,  587,  580,  581,  594,  595,  588,
      596,  582,  583,  597,  598,  589,  584,  585,  590,  591,
      592,  593,  599,  600,  601,  602,  603,  604,  605,  606,
      607,  608,  609,  587,  610,  611,  594,  595,  588,  596,
      614,  615,  597,  598,  589,  616,  617,  618,  623, 1190,
      624,  599,  600,  601,  602,  603,  604,  605,  606,  607,
      608,  609,  619,  610,  611,  625,  620,  621,  626,  614,
      615,  627,  628,  631,  616,  617,  618,  623,  622,  624,

      629,  632,  633,  634,  635,  636,  637,  479,  639,  640,
      641,  619,  642,  645,  625,  620,  621,  626,  630,  646,
      627,  628,  631,  643,  647,  644,  648,  622,  649,  629,
      632,  633,  634,  635,  636,  637,  638,  639,  640,  641,
      650,  642,  645,  651,  652,  653,  654,  630,  646,  655,
      656,  657,  643,  647,  644,  648,  658,  649,  659,  660,
      661,  662,  663,  664,  665,  638,  666,  667,  668,  650,
      669,  670,  651,  652,  653,  654,  671,  672,  655,  656,
      657,  673,  674,  675,  676,  658,  677,  659,  660,  661,
      662,  663,  664,  665,  681,  666,  667,  668,  682,  669,

      670,  678,  679,  683,  684,  671,  672,  685,  686,  687,
      673,  674,  675,  676,  691,  677,  692,  688,  680,  694,
      695,  696,  697,  681,  689,  698,  699,  682,  700,  701,
      678,  679,  683,  684,  704,  690,  685,  686,  687,  705,
      702,  706,  707,  691,  708,  692,  688,  680,  694,  695,
      696,  697,  709,  689,  698,  699,  703,  700,  701,  710,
      712,   62,  369,  704,  690,  194,  713,  714,  705,  702,
      706,  707,  715,  708,  716,  454,  717,  718,  719, 1190,
     1190,  709,  720,  721,  722,  703,  723,  724,  710,  712,
      725,  726,  727,  728,  729,  713,  714,  730,  731,  732,

      733,  715,  735,  716,  454,  717,  718,  719,  195,  368,
      559,  720,  721,  722,  736,  723,  724,  737,  734,  725,
      726,  727,  728,  729,  738,  739,  730,  731,  732,  733,
      740,  735,  741,  742,  743,  744,  745,  746,  747,  748,
      749,  750,  752,  736,  753,  754,  737,  734,  755,  756,
      758,  759,  760,  738,  739,  757,  761,  762,  763,  740,
      764,  741,  742,  743,  744,  745,  746,  747,  748,  749,
      750,  752,  765,  753,  754,  766,  767,  755,  756,  758,
      759,  760,  768,  769,  757,  761,  762,  763,  770,  764,
      771,  772,  773,  774,  775,  776,  777,  778,  779,  780,

      781,  765,  782,  783,  766,  767,  784,  785,  786,  787,
      788,  768,  769,  789,  790,  791,  792,  770,  793,  771,
      772,  773,  774,  775,  776,  777,  778,  779,  780,  781,
      794,  782,  783,  795,  796,  784,  785,  786,  787,  788,
      797,  798,  789,  790,  791,  792,  799,  793,  800,  801,
      802,  803,  804,  805,  806,  807,  808,  809,  810,  794,
      811,  812,  795,  796,  813,  814,  815,  816,  817,  797,
      798,  818,  819,  820,  821,  799,  822,  800,  801,  802,
      803,  804,  805,  806,  807,  808,  809,  810,  823,  811,
      812,  824,  825,  813,  814,  815,  816,  817,  826,  827,

      818,  819,  820,  821,  828,  822,  829,  830,  831,  832,
      833,  834,  835,  836,  837,  838,  839,  823,  840,  841,
      824,  825,  842,  843,  844,  845,  846,  826,  827,  847,
      848,  849,  850,  828,  851,  829,  830,  831,  832,  833,
      834,  835,  836,  837,  838,  839,  852,  840,  841,  854,
      855,  842,  843,  844,  845,  846,  856,  853,  847,  848,
      849,  850,  857,  851,  858,  859,  860,  861,  862,  863,
      864,  865,  866,  867,  868,  852,  869,  870,  854,  855,
      871,  872,  873,  874,  875,  856,  853,  876,  880,  882,
      883,  857,  884,  858,  859,  860,  861,  862,  863,  864,

      865,  866,  867,  868,  885,  869,  870,  877,  886,  871,
      872,  873,  874,  875,  878,  887,  876,  880,  882,  883,
      888,  884,  889,  890,  891,  879,  892,  893,  894,  895,
      896,  897,  898,  885,  899,  901,  877,  886,  902,  903,
      904,  905,  906,  878,  887,  907,  908,  909,  910,  888,
      911,  889,  890,  891,  879,  892,  893,  894,  895,  896,
      897,  898,  912,  899,  901,  913,  915,  902,  903,  904,
      905,  906,  916,  917,  907,  908,  909,  910,  918,  911,
      452,  919,  920,  921,  922,  923,  924,  925,  926,  914,
      927,  912,  928,  929,  930,  915,  931,  932,  933,  934,

      935,  916,  917,  937,  938,  939,  940,  918,  941,  452,
      919,  920,  921,  922,  923,  924,  925,  926,  914,  927,
      942,  928,  929,  930,  943,  931,  932,  933,  934,  935,
      944,  945,  937,  938,  939,  940,  946,  941,  947,  948,
      949,  950,  952,  953,  954,  955,  956,  957,  958,  942,
      959,  960,  951,  943,  961,  962,  963,  965,  966,  944,
      945,  967,  964,  968,  969,  946,  970,  947,  948,  949,
      950,  952,  953,  954,  955,  956,  957,  958,  971,  959,
      960,  951,  972,  961,  962,  963,  965,  966,  973,  974,
      967,  964,  968,  969,  975,  970,  976,  977,  978,  979,

      980,  981,  983,  984,  985,  986,  987,  971,  988,  989,
      990,  972,  991,  992,  993,  994,  995,  973,  974,  996,
      997,  998,  999,  975, 1000,  976,  977,  978,  979,  980,
      981,  983,  984,  985,  986,  987, 1001,  988,  989,  990,
     1002,  991,  992,  993,  994,  995, 1003, 1004,  996,  997,
      998,  999, 1008, 1000, 1005, 1011, 1012, 1013, 1014, 1015,
     1016, 1017, 1018, 1019, 1020, 1001, 1021, 1022, 1023, 1002,
     1006, 1007, 1024, 1025, 1026, 1003, 1004, 1027, 1028, 1029,
     1031, 1008, 1032, 1005, 1011, 1012, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1033, 1021, 1022, 1023, 1034, 1006,

     1007, 1024, 1025, 1026, 1035, 1036, 1027, 1028, 1029, 1031,
     1037, 1032, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047,
     1048, 1049, 1050, 1033, 1051, 1052, 1053, 1034, 1054, 1055,
     1056, 1057, 1058, 1035, 1036, 1059, 1060, 1061, 1062, 1037,
     1063, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048,
     1049, 1050, 1064, 1051, 1052, 1053, 1065, 1054, 1055, 1056,
     1057, 1058, 1066, 1067, 1059, 1060, 1061, 1062, 1068, 1063,
     1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
     1079, 1064, 1080, 1081, 1082, 1065, 1083, 1085, 1086, 1087,
     1088, 1066, 1067, 1089, 1090, 1091, 1092, 1068, 1093, 1069,

     1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
     1094, 1080, 1081, 1082, 1095, 1083, 1085, 1086, 1087, 1088,
     1096, 1097, 1089, 1090, 1091, 1092, 1098, 1093, 1099, 1100,
     1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1094,
     1110, 1111, 1112, 1095, 1113, 1114, 1115, 1116, 1117, 1096,
     1097, 1118, 1119, 1120, 1121, 1098, 1122, 1099, 1100, 1101,
     1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1123, 1110,
     1111, 1112, 1124, 1113, 1114, 1115, 1116, 1117, 1125, 1126,
     1118, 1119, 1120, 1121, 1127, 1122, 1129, 1130, 1131, 1132,
     1133, 1134, 1135, 1136, 1137, 1138, 1139, 1123, 1140, 1141,

     1142, 1124, 1143, 1144, 1145, 1146, 1147, 1125, 1126, 1148,
     1149, 1150, 1151, 1127, 1152, 1129, 1130, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1138, 1139, 1153, 1140, 1141, 1142,
     1154, 1143, 1144, 1145, 1146, 1147, 1155, 1156, 1148, 1149,
     1150, 1151, 1157, 1152, 1158, 1159, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1167, 1168, 1153, 1169, 1170, 1172, 1154,
     1173, 1174, 1175, 1176, 1177, 1155, 1156, 1178, 1179, 1180,
     1181, 1157, 1182, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
     1165, 1166, 1167, 1168, 1183, 1169, 1170, 1172, 1184, 1173,
     1174, 1175, 1176, 1177, 1185, 1186, 1178, 1179, 1180, 1181,

     1187, 1182, 1188, 1189, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1183, 1190, 1190, 1190, 1184, 1190, 1190,
     1190, 1190, 1190, 1185, 1186, 1190, 1190, 1190, 1190, 1187,
     1190, 1188, 1189,   55,   55,   55,   55,   55,   55,   55,
       55,   60,   60,   60,   60,   60,   60,   60,   60,   64,
     1190,   64,   64,   64,   64,   64,   64,   66,   66,   66,
       66,   66,   66,   66,   66,   85,   85,   85,   85,   85,
       85,   88,   88,  182,  182,  182,  182,  182,  182,  182,
      189,  189,  189,  189,  189,  189,  189,  189,  193, 1190,
      193,  193,  193,  193,  193,  193,  205,  205, 1190,  205,

      205,  205,  205,  205,  207,  207,  207,  207, 1190,  207,
      207,  207,  209,  209,  209,  209,  209,  209,  209,  184,
      184,  184,  184,  184,  184,  184,  188, 1190,  188,  188,
      188,  188,  188,  188,  370, 1190,  370,  370,  370,  370,
      370,  370,  373, 1190,  373,  373,  373,  373,  373,  373,
      375, 1190,  375,  375,  375,  375,  375,  375,  377, 1190,
      377,  377,  377,  377,  377,  377,  558, 1190,  558,  558,
      558,  558,  558,  558,    7, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190
    } ;

static yyconst flex_int16_t yy_chk[2658] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    5,    6,   12,   16,   12,   25,
       25,    3,    4,   33,   16,   17,   17,   36,   17,   17,

       17,   17,   17,   18,   18,   18,   18,   18,   23,   23,
       23,   26, 1204,    5,    6,   20,   26,   20,   20,   20,
       20,   20,   33,  205,   43,  205,   36,  207,   20, 1200,
       48,   20,   76,   76,  207,   37,   12,   16,   21,   37,
       21,   21,   21,   21,   21,   28,   94,   94,   27,   42,
       20,   51,   42,   43,   21,   29,   27,   20,   27,   48,
       20,   26,   29,   27,   37,   27,   28,   66,   37,   29,
       28,   52,   29,   28,   66,   29,   28,   27,   42,   20,
       51,   42,   34,   21,   29,   27,   28,   27, 1163,   30,
       34,   29,   27,   30,   27,   28,   34,   30,   29,   28,

       52,   29,   28,   30,   29,   28,   30,   89, 1106,   30,
       31,   34,   69,   92,   93,   28,   50,   66,   30,   34,
       32,   31,   30,   31,   32,   34,   30, 1045,   31,  200,
      200,   32,   30,   31,   32,   30,   89,   32,   30,   31,
       32,   38,   92,   93, 1043,   38,  209,   50,  192,   32,
       31,   38,   31,   32,   41,   69,   41,   31,   41,   40,
       32,   41,   31,   32,   35,   35,   32,   39,   97,   32,
       38,   39,   35,   40,   38,   39,   50,   35,   35,   40,
       38,   39,   44,   41,  986,   41,   44,   41,   40,   44,
       41,  192,   44,   35,   35,  983,   39,   97,  209,  967,

       39,   35,   40,  940,   39,  939,   35,   35,   40,  188,
       39,   44,   46,   49,   49,   44,   46,  908,   44,   46,
       46,   44,   45,   49,   45,   90,   46,   45,   60,   46,
       60,  846,   85,   90,   45,   45,   45,   85,   45,   45,
       45,   46,   49,   49,   63,   46,   63,   53,   46,   46,
      368,   45,   49,   45,   90,   46,   45,  188,   46,   53,
       53,  798,   90,   45,   45,   45,   95,   45,   45,   45,
       47,   58,   47,   98,  104,   47,   47,  100,   60,   58,
       95,   58,   85,  108,  100,  109,   58,  772,   58,   71,
       71,   71,   71,   71,   63,   95,  556,   53,  368,   47,

       58,   47,   98,  104,   47,   47,  100,  534,   58,   95,
       58,  445,  108,  100,  109,   58,   72,   58,   72,   72,
       72,   72,   72,   73,   73,   73,   73,   73,  110,  444,
       91,  101,   72,   91,  387,  101,  103,   73,   75,   75,
       75,   75,   75,   77,   77,  111,  103,   77,   77,   77,
       77,   77,   75,  105,   91,  112,   96,  110,  105,   91,
      101,   72,   91,   96,  101,  103,   73,  114,  362,   96,
      102,  102,  102,  107,  111,  103,  107,  106,  113,  102,
      106,   75,  105,   91,  112,   96,  106,  105,  116,  117,
      115,  118,   96,  106,  106,  113,  114,  115,   96,  102,

      102,  102,  107,  119,  120,  107,  106,  113,  102,  106,
      121,  122,  123,  124,  125,  106,  127,  116,  117,  115,
      118,  130,  106,  106,  113,  122,  115,  131,  132,  133,
      134,  355,  119,  120,  295,  134,  128,  137,  128,  121,
      122,  123,  124,  125,  288,  127,  128,  128,  138,  239,
      130,  128,  128,  140,  122,  184,  131,  132,  133,  134,
      135,  141,  135,  135,  134,  128,  137,  128,  139,  143,
      143,  136,  145,  136,  146,  128,  128,  138,  139,  142,
      128,  128,  140,  147,  136,  136,  193,  142,  149,  135,
      141,  135,  135,  136,  150,  152,  153,  139,  143,  143,

      136,  145,  136,  146,  154,  148,  155,  139,  142,  148,
      144,  157,  147,  136,  136,  148,   87,  149,   86,  158,
      160,   84,  136,  150,  152,  153,  161,   81,  163,  193,
      156,  605,  605,  154,  148,  155,  162,   70,  148,  156,
      157,  156,  159,  156,  148,  151,  159,  156,  158,  160,
      151,  151,  164,  162,  166,  161,  151,  163,  151,  156,
      151,  151,  165,  151,  151,  162,  151,  165,  156,  171,
      156,  159,  156,  165,  151,  159,  156,  167,  167,  151,
      151,  164,  162,  166,  173,  151,  189,  151,  189,  151,
      151,  165,  151,  151,  174,  151,  165,  169,  171,  176,

      174,  177,  165,  170,  179,  169,  167,  167,  170,  180,
      170,  170,  172,  173,  181,  175,  172,  169,  170,  175,
      172,  194,  190,  174,  190,  191,  169,  191,  176,  174,
      177,   68,  170,  179,  169,  195,  189,  170,  180,  170,
      170,  172,  182,  181,  175,  172,  169,  170,  175,  172,
      187,   62,   57,  187,  182,  182,  198,  198,  198,  198,
      198,  197,  197,   54,  194,  197,  197,  197,  197,  197,
      198,  213,  190,  214,  187,  191,   22,   19,  195,  187,
      199,  199,  187,  219,  199,  199,  199,  199,  199,  218,
      219,  219,  182,  220,  182,  221,  222,  223,  225,  198,

      213,  226,  214,  187,  201,  201,  201,  201,  201,  202,
      202,  202,  202,  202,  227,  228,  229,  228,  218,  230,
      229,  232,  220,  231,  221,  222,  223,  225,  234,  235,
      226,  236,  231,  237,  237,  238,  241,  240,  233,  238,
      240,  243,  244,  227,  228,  229,  228,  242,  230,  229,
      232,  242,  231,  233,  233,  245,  233,  234,  235,  247,
      236,  231,  237,  237,  238,  241,  240,  233,  238,  240,
      243,  244,  248,  249,  250,  251,  242,  253,  254,  256,
      242,  257,  233,  233,  245,  233,  255,  255,  247,  258,
      259,  260,  261,  260,  262,  263,  264,  265,  266,  267,

      268,  248,  249,  250,  251,  269,  253,  254,  256,  270,
      257,  271,  272,  273,   15,  255,  255,  275,  258,  259,
      260,  261,  260,  262,  263,  264,  265,  266,  267,  268,
      274,  276,  274,  274,  269,  277,  278,  279,  270,  280,
      271,  272,  273,  274,  281,  282,  275,  283,  284,  285,
      286,  287,  289,  274,  290,  279,  291,  292,  293,  285,
      276,  294,  296,  297,  277,  278,  279,  298,  280,  299,
      298,  300,  274,  281,  282,  301,  283,  284,  285,  286,
      287,  289,  274,  290,  279,  291,  292,  293,  285,  303,
      294,  296,  297,  302,  302,  304,  298,  299,  305,  298,

      300,  306,  307,  308,  301,  309,  310,  311,  312,  313,
      314,  308,  315,  316,  317,  318,  313,  319,  303,  320,
      321,  322,  302,  302,  304,  323,  299,  305,  324,  325,
      306,  307,  308,  327,  309,  310,  311,  312,  313,  314,
      308,  315,  316,  317,  318,  313,  319,  328,  320,  321,
      322,  329,  330,  333,  323,  331,  334,  324,  325,  335,
      336,  337,  327,  338,  339,  340,  341,  342,  343,  331,
      345,  344,  346,  331,  369,  348,  328,  344,  331,  349,
      329,  330,  333,  350,  331,  334,  351,  352,  335,  336,
      337,  354,  338,  339,  340,  341,  342,  343,  331,  345,

      344,  346,  331,  347,  348,  347,  344,  356,  349,  358,
      357,  357,  350,  358,  359,  351,  352,  360,  361,  364,
      354,  365,  369,  370,  371,  372,  385,   11,  373,    7,
      370,  371,  347,  357,  347,  373,  356,  374,  358,  357,
      357,  386,  358,  359,  374,  375,  360,  361,  364,  376,
      365,    0,  375,    0,    0,  385,  376,  378,  378,  378,
      378,  378,  357,  379,  379,  379,  379,  379,  372,  389,
      386,  390,  391,  370,  371,  392,  396,  398,  373,  380,
      380,  380,  380,  380,  399,  400,  401,  374,  402,  403,
      404,  405,  406,  407,  408,  375,  409,  410,  389,  376,

      390,  391,  411,  412,  392,  396,  398,  413,  414,  416,
      417,  418,  419,  399,  400,  401,  414,  402,  403,  404,
      405,  406,  407,  408,  415,  409,  410,  420,  421,  415,
      422,  411,  412,  423,  424,  415,  413,  414,  416,  417,
      418,  419,  428,  430,  431,  433,  434,  435,  436,  437,
      438,  440,  441,  415,  442,  443,  420,  421,  415,  422,
      446,  447,  423,  424,  415,  448,  449,  450,  457,    0,
      461,  428,  430,  431,  433,  434,  435,  436,  437,  438,
      440,  441,  451,  442,  443,  462,  451,  455,  465,  446,
      447,  466,  468,  472,  448,  449,  450,  457,  455,  461,

      470,  473,  474,  475,  476,  477,  478,  479,  480,  482,
      483,  451,  484,  486,  462,  451,  455,  465,  470,  487,
      466,  468,  472,  485,  488,  485,  489,  455,  490,  470,
      473,  474,  475,  476,  477,  478,  479,  480,  482,  483,
      491,  484,  486,  492,  493,  494,  496,  470,  487,  497,
      498,  499,  485,  488,  485,  489,  500,  490,  501,  502,
      503,  504,  505,  506,  507,  479,  508,  509,  510,  491,
      511,  512,  492,  493,  494,  496,  513,  515,  497,  498,
      499,  516,  517,  518,  519,  500,  520,  501,  502,  503,
      504,  505,  506,  507,  522,  508,  509,  510,  523,  511,

      512,  521,  521,  524,  525,  513,  515,  526,  527,  530,
      516,  517,  518,  519,  532,  520,  533,  531,  521,  537,
      538,  539,  540,  522,  531,  541,  542,  523,  543,  544,
      521,  521,  524,  525,  546,  531,  526,  527,  530,  547,
      545,  548,  549,  532,  551,  533,  531,  521,  537,  538,
      539,  540,  552,  531,  541,  542,  545,  543,  544,  554,
      557,  558,  559,  546,  531,  560,  562,  563,  547,  545,
      548,  549,  564,  551,  565,  566,  567,  568,  569,    0,
        0,  552,  570,  572,  573,  545,  574,  575,  554,  557,
      576,  577,  578,  580,  582,  562,  563,  583,  584,  585,

      586,  564,  587,  565,  566,  567,  568,  569,  560,  558,
      559,  570,  572,  573,  588,  574,  575,  589,  586,  576,
      577,  578,  580,  582,  590,  591,  583,  584,  585,  586,
      592,  587,  593,  594,  595,  596,  597,  598,  599,  600,
      601,  602,  607,  588,  608,  611,  589,  586,  612,  613,
      614,  616,  619,  590,  591,  613,  620,  621,  622,  592,
      623,  593,  594,  595,  596,  597,  598,  599,  600,  601,
      602,  607,  624,  608,  611,  628,  629,  612,  613,  614,
      616,  619,  630,  631,  613,  620,  621,  622,  633,  623,
      634,  635,  636,  637,  638,  639,  640,  641,  642,  643,

      644,  624,  647,  648,  628,  629,  649,  650,  654,  655,
      656,  630,  631,  657,  658,  659,  660,  633,  661,  634,
      635,  636,  637,  638,  639,  640,  641,  642,  643,  644,
      662,  647,  648,  663,  666,  649,  650,  654,  655,  656,
      667,  668,  657,  658,  659,  660,  669,  661,  670,  671,
      672,  673,  674,  675,  676,  677,  678,  679,  680,  662,
      681,  682,  663,  666,  683,  685,  686,  687,  688,  667,
      668,  689,  690,  691,  692,  669,  695,  670,  671,  672,
      673,  674,  675,  676,  677,  678,  679,  680,  696,  681,
      682,  697,  698,  683,  685,  686,  687,  688,  699,  702,

      689,  690,  691,  692,  703,  695,  704,  705,  706,  707,
      711,  712,  713,  714,  716,  718,  720,  696,  721,  723,
      697,  698,  724,  725,  726,  727,  729,  699,  702,  731,
      732,  733,  734,  703,  735,  704,  705,  706,  707,  711,
      712,  713,  714,  716,  718,  720,  736,  721,  723,  737,
      738,  724,  725,  726,  727,  729,  739,  736,  731,  732,
      733,  734,  740,  735,  741,  743,  744,  745,  750,  752,
      753,  755,  756,  757,  760,  736,  762,  763,  737,  738,
      764,  765,  766,  767,  768,  739,  736,  769,  771,  773,
      774,  740,  775,  741,  743,  744,  745,  750,  752,  753,

      755,  756,  757,  760,  776,  762,  763,  770,  778,  764,
      765,  766,  767,  768,  770,  779,  769,  771,  773,  774,
      780,  775,  781,  782,  783,  770,  784,  785,  786,  788,
      791,  792,  793,  776,  797,  800,  770,  778,  801,  803,
      804,  805,  806,  770,  779,  807,  808,  809,  810,  780,
      811,  781,  782,  783,  770,  784,  785,  786,  788,  791,
      792,  793,  812,  797,  800,  813,  814,  801,  803,  804,
      805,  806,  815,  816,  807,  808,  809,  810,  817,  811,
      818,  819,  820,  821,  823,  825,  827,  828,  830,  813,
      831,  812,  832,  833,  834,  814,  836,  839,  842,  843,

      844,  815,  816,  847,  848,  849,  850,  817,  851,  818,
      819,  820,  821,  823,  825,  827,  828,  830,  813,  831,
      852,  832,  833,  834,  853,  836,  839,  842,  843,  844,
      854,  859,  847,  848,  849,  850,  860,  851,  861,  864,
      865,  866,  867,  868,  870,  873,  874,  875,  876,  852,
      877,  878,  866,  853,  879,  880,  881,  882,  884,  854,
      859,  885,  881,  887,  888,  860,  889,  861,  864,  865,
      866,  867,  868,  870,  873,  874,  875,  876,  891,  877,
      878,  866,  893,  879,  880,  881,  882,  884,  894,  898,
      885,  881,  887,  888,  900,  889,  901,  902,  904,  905,

      906,  907,  909,  910,  911,  912,  914,  891,  915,  916,
      917,  893,  918,  919,  920,  923,  924,  894,  898,  925,
      926,  927,  929,  900,  930,  901,  902,  904,  905,  906,
      907,  909,  910,  911,  912,  914,  931,  915,  916,  917,
      932,  918,  919,  920,  923,  924,  933,  934,  925,  926,
      927,  929,  937,  930,  936,  942,  943,  944,  946,  947,
      949,  950,  951,  952,  953,  931,  955,  958,  959,  932,
      936,  936,  960,  961,  962,  933,  934,  963,  964,  966,
      968,  937,  970,  936,  942,  943,  944,  946,  947,  949,
      950,  951,  952,  953,  971,  955,  958,  959,  972,  936,

      936,  960,  961,  962,  973,  975,  963,  964,  966,  968,
      976,  970,  977,  979,  981,  982,  984,  987,  988,  989,
      990,  996,  997,  971,  998,  999, 1001,  972, 1004, 1005,
     1006, 1007, 1011,  973,  975, 1012, 1013, 1014, 1015,  976,
     1016,  977,  979,  981,  982,  984,  987,  988,  989,  990,
      996,  997, 1017,  998,  999, 1001, 1018, 1004, 1005, 1006,
     1007, 1011, 1019, 1020, 1012, 1013, 1014, 1015, 1021, 1016,
     1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1035,
     1036, 1017, 1039, 1040, 1041, 1018, 1042, 1044, 1047, 1049,
     1051, 1019, 1020, 1052, 1053, 1055, 1056, 1021, 1057, 1022,

     1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036,
     1058, 1039, 1040, 1041, 1061, 1042, 1044, 1047, 1049, 1051,
     1062, 1063, 1052, 1053, 1055, 1056, 1064, 1057, 1065, 1066,
     1067, 1068, 1069, 1072, 1073, 1075, 1076, 1079, 1080, 1058,
     1082, 1083, 1084, 1061, 1085, 1087, 1088, 1090, 1091, 1062,
     1063, 1092, 1093, 1094, 1095, 1064, 1097, 1065, 1066, 1067,
     1068, 1069, 1072, 1073, 1075, 1076, 1079, 1080, 1098, 1082,
     1083, 1084, 1102, 1085, 1087, 1088, 1090, 1091, 1103, 1104,
     1092, 1093, 1094, 1095, 1105, 1097, 1107, 1108, 1109, 1110,
     1111, 1112, 1113, 1114, 1115, 1116, 1118, 1098, 1120, 1121,

     1122, 1102, 1123, 1124, 1126, 1127, 1128, 1103, 1104, 1130,
     1132, 1133, 1134, 1105, 1135, 1107, 1108, 1109, 1110, 1111,
     1112, 1113, 1114, 1115, 1116, 1118, 1136, 1120, 1121, 1122,
     1138, 1123, 1124, 1126, 1127, 1128, 1139, 1140, 1130, 1132,
     1133, 1134, 1143, 1135, 1144, 1145, 1147, 1148, 1149, 1150,
     1151, 1155, 1156, 1157, 1159, 1136, 1160, 1161, 1164, 1138,
     1165, 1167, 1168, 1169, 1170, 1139, 1140, 1171, 1172, 1173,
     1175, 1143, 1176, 1144, 1145, 1147, 1148, 1149, 1150, 1151,
     1155, 1156, 1157, 1159, 1177, 1160, 1161, 1164, 1178, 1165,
     1167, 1168, 1169, 1170, 1181, 1182, 1171, 1172, 1173, 1175,

     1183, 1176, 1184, 1188,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1177,    0,    0,    0, 1178,    0,    0,
        0,    0,    0, 1181, 1182,    0,    0,    0,    0, 1183,
        0, 1184, 1188, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1193,
        0, 1193, 1193, 1193, 1193, 1193, 1193, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195, 1195, 1195,
     1195, 1196, 1196, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1199,    0,
     1199, 1199, 1199, 1199, 1199, 1199, 1201, 1201,    0, 1201,

     1201, 1201, 1201, 1201, 1202, 1202, 1202, 1202,    0, 1202,
     1202, 1202, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1206,    0, 1206, 1206,
     1206, 1206, 1206, 1206, 1207,    0, 1207, 1207, 1207, 1207,
     1207, 1207, 1208,    0, 1208, 1208, 1208, 1208, 1208, 1208,
     1209,    0, 1209, 1209, 1209, 1209, 1209, 1209, 1210,    0,
     1210, 1210, 1210, 1210, 1210, 1210, 1211,    0, 1211, 1211,
     1211, 1211, 1211, 1211, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[274] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
#line 4 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
#include "include/ast/ast.h"
#include "pmysql.tab.hh"
#include <stdarg.h>
#include <string.h>

void yyerror(const char *s, ...);

int oldstate;


#line 18 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
    /* handle locations */
    int yycolumn = 1;

    #define YY_USER_ACTION yylloc.first_line = yylloc.last_line = yylineno; \
        yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1; \
        yycolumn += yyleng;
#line 1486 "/Users/wengzhao/Desktop/fondlefish/sql-parser/build/pmysql.cc"

#define INITIAL 0
#define COMMENTX 1
#define BTWMODE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"


    /* keywords */
#line 1674 "/Users/wengzhao/Desktop/fondlefish/sql-parser/build/pmysql.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1191 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2575 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 29 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 30 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 31 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 32 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ...
     * return special AND token if BETWEEN seen
     */
case 5:
YY_RULE_SETUP
#line 37 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ BEGIN INITIAL; return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 38 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ANDOP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 39 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ANY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 40 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return AS; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 41 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ASC; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 42 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 43 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return BEFORE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 44 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 45 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return BIGINT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 46 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return BINARY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 47 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return BIT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 48 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return BLOB; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 49 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return BOTH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 50 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return BY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 51 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CALL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 52 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CASCADE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 53 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CASE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 54 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CHANGE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 55 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CHAR; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 56 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CHECK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 57 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return COLLATE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 58 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return COLUMN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 59 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return COMMENT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 60 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CONDITION; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 61 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CONSTRAINT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 62 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CONTINUE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 63 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CONVERT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 64 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CREATE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 65 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CROSS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 66 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CURRENT_DATE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 67 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CURRENT_TIME; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 68 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 69 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CURRENT_USER; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 70 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return CURSOR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 71 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DATABASE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DATABASES; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 73 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DATE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 74 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DATETIME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DAY_HOUR; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 76 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DAY_MICROSECOND; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 77 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DAY_MINUTE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 78 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DAY_SECOND; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 79 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DECIMAL; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 80 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DECLARE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 81 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DEFAULT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 82 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DELAYED; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 83 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DELETE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 84 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DESC; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 85 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DESCRIBE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 86 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DETERMINISTIC; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 87 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DISTINCT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 88 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DISTINCTROW; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 89 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DIV; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 90 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DOUBLE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 91 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DROP; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 92 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return DUAL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 93 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return EACH; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 94 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ELSE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 95 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ELSEIF; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 96 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return END; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 97 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ENUM; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 98 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ESCAPE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 99 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 0; return EXISTS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 100 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 1; return EXISTS; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 101 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return EXIT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 102 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return EXPLAIN; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 103 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FETCH; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 104 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FLOAT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 105 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FOR; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 106 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FORCE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 107 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FOREIGN; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 108 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FROM; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 109 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FULLTEXT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 110 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return GRANT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 111 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return GROUP; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 112 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return HAVING; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 113 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return HIGH_PRIORITY; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 114 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return HOUR_MICROSECOND; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 115 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return HOUR_MINUTE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 116 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return HOUR_SECOND; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 117 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return IF; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 118 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return IGNORE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 119 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return IN; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 120 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return INFILE; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 121 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return INNER; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 122 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return INOUT; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 123 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 124 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return INSERT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 125 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return INTEGER; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 126 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return INTERVAL; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 127 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return INTO; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 128 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return IS; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 129 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ITERATE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 130 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return JOIN; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 131 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return KEY; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 132 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return KEYS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 133 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return KILL; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 134 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LEADING; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 135 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LEAVE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 136 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LEFT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 137 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LIKE; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 138 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LIMIT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 139 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LINES; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 140 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LOAD; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 141 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LOCALTIME; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 142 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LOCALTIMESTAMP; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 143 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LOCK; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 144 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LONG; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 145 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LONGBLOB; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 146 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LONGTEXT; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 147 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LOOP; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 148 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return LOW_PRIORITY; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 149 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return MATCH; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 150 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return MEDIUMBLOB; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 151 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return MEDIUMINT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 152 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return MEDIUMTEXT; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 153 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return MINUTE_MICROSECOND; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 154 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return MINUTE_SECOND; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 155 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return MOD; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 156 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return MODIFIES; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 157 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return NATURAL; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 158 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return NOT; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 159 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 160 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return NULLX; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 161 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return NUMBER; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 162 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ON; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 163 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ONDUPLICATE; } /* hack due to limited lookahead */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 164 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return OPTIMIZE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 165 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return OPTION; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 166 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return OPTIONALLY; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 167 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return OR; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 168 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ORDER; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 169 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return OUT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 170 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return OUTER; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 171 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return OUTFILE; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 172 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return PRECISION; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 173 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return PRIMARY; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 174 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return PROCEDURE; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 175 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return PURGE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 176 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return QUICK; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 177 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return READ; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 178 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return READS; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 179 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return REAL; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 180 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return REFERENCES; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 181 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return REGEXP; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 182 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return RELEASE; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 183 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return RENAME; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 184 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return REPEAT; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 185 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return REPLACE; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 186 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return REQUIRE; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 187 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return RESTRICT; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 188 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return RETURN; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 189 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return REVOKE; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 190 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return RIGHT; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 191 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ROLLUP; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 192 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SCHEMA; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 193 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SCHEMAS; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 194 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SECOND_MICROSECOND; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 195 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SELECT; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 196 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SENSITIVE; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 197 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SEPARATOR; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 198 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SET; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 199 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SHOW; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 200 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SONAME; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 201 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SPATIAL; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 202 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SPECIFIC; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 203 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SQL; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 204 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SQLEXCEPTION; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 205 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SQLSTATE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 206 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SQLWARNING; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 207 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SQL_BIG_RESULT; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 208 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 209 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SQL_SMALL_RESULT; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 210 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return SSL;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 211 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return STARTING; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 212 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return STRAIGHT_JOIN; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 213 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TABLE; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 214 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TEMPORARY; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 215 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TERMINATED; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 216 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TEXT; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 217 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return THEN; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 218 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TIME; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 219 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TIMESTAMP; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 220 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TINYINT; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 221 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TINYBLOB; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 222 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TINYTEXT; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 223 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TO; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 224 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TRAILING; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 225 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return TRIGGER; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 226 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return UNDO; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 227 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return UNION; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 228 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return UNIQUE; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 229 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return UNLOCK; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 230 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return UNSIGNED; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 231 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return UPDATE; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 232 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return USAGE; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 233 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return USE; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 234 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return USING; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 235 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return UTC_DATE; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 236 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return UTC_TIME; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 237 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return UTC_TIMESTAMP; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 238 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return VALUES; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 239 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return VARBINARY; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 240 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return VARCHAR; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 241 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return VARYING; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 242 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return WHEN; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 243 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return WHERE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 244 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return WHILE; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 245 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return WITH; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 246 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return WRITE; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 247 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return XOR; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 248 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return YEAR; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 249 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return YEAR_MONTH; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 250 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ZEROFILL; }
	YY_BREAK
/* numbers */
case 219:
YY_RULE_SETUP
#line 253 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.intval = atoi(yytext); return INTNUM; }
	YY_BREAK
case 220:
#line 255 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
case 221:
#line 256 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
case 222:
#line 257 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
case 223:
#line 258 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
case 224:
YY_RULE_SETUP
#line 258 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.floatval = atof(yytext); return APPROXNUM; }
	YY_BREAK
/* booleans */
case 225:
YY_RULE_SETUP
#line 261 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.intval = 1; return BOOL; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 262 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.intval = -1; return BOOL; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 263 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.intval = 0; return BOOL; }
	YY_BREAK
/* strings */
case 228:
#line 267 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
case 229:
YY_RULE_SETUP
#line 267 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
case 230:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 269 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
case 231:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 270 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
/* hex strings */
case 232:
#line 274 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
case 233:
YY_RULE_SETUP
#line 274 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* bit strings */
case 234:
#line 278 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
case 235:
YY_RULE_SETUP
#line 278 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* operators */
case 236:
YY_RULE_SETUP
#line 281 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return yytext[0]; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 283 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ANDOP; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 284 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return OR; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 286 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 1; return COMPARISON; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 287 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 2; return COMPARISON; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 288 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 3; return COMPARISON; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 289 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 4; return COMPARISON; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 290 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 5; return COMPARISON; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 291 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 6; return COMPARISON; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 292 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 7; return COMPARISON; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 294 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 1; return SHIFT; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 295 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.subtok = 2; return SHIFT; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 297 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return ASSIGN; }
	YY_BREAK
/* functions */
case 249:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 300 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FSUBSTRING; }
	YY_BREAK
case 250:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 301 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FTRIM; }
	YY_BREAK
case 251:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 302 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FDATE_ADD; }
	YY_BREAK
case 252:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 303 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ return FDATE_SUB; }
	YY_BREAK
/* check trailing context manually */
case 253:
YY_RULE_SETUP
#line 306 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ 
                        int c = yyinput(); unput(c);
                        if (c == '(') return FCOUNT;
                        yylval.strval = strdup(yytext);
                        return NAME;
                    }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 313 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.strval = strdup(yytext); return NAME;}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 314 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.strval = strdup(yytext+1); yylval.strval[yyleng-2] = 0; return NAME; }
	YY_BREAK
case 256:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 315 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yyerror("Unterminated quoted name %s", yytext); }
	YY_BREAK
/* user variables */
case 257:
#line 319 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
case 258:
#line 320 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
case 259:
#line 321 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
case 260:
YY_RULE_SETUP
#line 321 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yylval.strval = strdup(yytext+1); return USERVAR; }
	YY_BREAK
case 261:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 323 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yyerror("Unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 262:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 324 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yyerror("Unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 263:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 325 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yyerror("Unterminated quoted user variable %s", yytext); }
	YY_BREAK
/* comments */
case 264:
YY_RULE_SETUP
#line 328 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 329 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 331 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ oldstate = YYSTART; BEGIN COMMENTX; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 332 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ BEGIN oldstate; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 333 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
;
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 334 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yycolumn = 1; }
	YY_BREAK
case YY_STATE_EOF(COMMENTX):
#line 335 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yyerror("unclose comment"); }
	YY_BREAK
/* everything else */
case 270:
YY_RULE_SETUP
#line 338 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
/* whitespace */
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 339 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{ yycolumn = 1; } 
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 340 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
{yyerror("mystery character '%s'", *yytext); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 342 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3157 "/Users/wengzhao/Desktop/fondlefish/sql-parser/build/pmysql.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BTWMODE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1191 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1191 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1190);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 342 "/Users/wengzhao/Desktop/fondlefish/sql-parser/pmysql.l"
